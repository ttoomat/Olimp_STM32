
F303_syntezator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000043c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005c4  080005c4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005c4  080005c4  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080005c4  080005c4  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005c4  080005c4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005c4  080005c4  000105c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005c8  080005c8  000105c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080005cc  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          00000024  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000028  20000028  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .debug_info   000015dc  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005cf  00000000  00000000  00021610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001e8  00000000  00000000  00021be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001a0  00000000  00000000  00021dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aec8  00000000  00000000  00021f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001c10  00000000  00000000  0003ce30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a43e0  00000000  00000000  0003ea40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000e2e20  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000005f0  00000000  00000000  000e2e70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080005ac 	.word	0x080005ac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080005ac 	.word	0x080005ac

080001c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	db0b      	blt.n	80001f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	f003 021f 	and.w	r2, r3, #31
 80001e0:	4907      	ldr	r1, [pc, #28]	; (8000200 <__NVIC_EnableIRQ+0x38>)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	095b      	lsrs	r3, r3, #5
 80001e8:	2001      	movs	r0, #1
 80001ea:	fa00 f202 	lsl.w	r2, r0, r2
 80001ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	e000e100 	.word	0xe000e100

08000204 <TIMER2_setup>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */



void TIMER2_setup(){
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
	// HSI -> AHB -> APB1 presc-> TIM2EN
	RCC->APB1ENR|= RCC_APB1ENR_TIM2EN;
 800020a:	4b1a      	ldr	r3, [pc, #104]	; (8000274 <TIMER2_setup+0x70>)
 800020c:	69db      	ldr	r3, [r3, #28]
 800020e:	4a19      	ldr	r2, [pc, #100]	; (8000274 <TIMER2_setup+0x70>)
 8000210:	f043 0301 	orr.w	r3, r3, #1
 8000214:	61d3      	str	r3, [r2, #28]
	/*%%%%%%%%% TIMER SETTINGS  %%%%%%%%%*/
	// Prescaler and Auto-reload reg. Settings
	TIM2->PSC=7999;
 8000216:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800021a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800021e:	629a      	str	r2, [r3, #40]	; 0x28
	//TIM2->ARR=1000-1;
	int freq = 110;
 8000220:	236e      	movs	r3, #110	; 0x6e
 8000222:	607b      	str	r3, [r7, #4]
	TIM2->ARR=(1000-1)/freq;
 8000224:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	fb92 f2f3 	sdiv	r2, r2, r3
 800022e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000232:	62da      	str	r2, [r3, #44]	; 0x2c
	//TIM2->EGR|=TIM_EGR_UG;

	// Update Interrupt
	TIM2->DIER |= TIM_DIER_UIE;
 8000234:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000238:	68db      	ldr	r3, [r3, #12]
 800023a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800023e:	f043 0301 	orr.w	r3, r3, #1
 8000242:	60d3      	str	r3, [r2, #12]

	/*%%%%%%%%% TIMER ENABLE  %%%%%%%%%*/
	TIM2->CR1 |= TIM_CR1_CEN;
 8000244:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800024e:	f043 0301 	orr.w	r3, r3, #1
 8000252:	6013      	str	r3, [r2, #0]
	TIM2->CR1 |= TIM_CR1_ARPE;
 8000254:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800025e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000262:	6013      	str	r3, [r2, #0]

	NVIC_EnableIRQ(TIM2_IRQn);
 8000264:	201c      	movs	r0, #28
 8000266:	f7ff ffaf 	bl	80001c8 <__NVIC_EnableIRQ>
}
 800026a:	bf00      	nop
 800026c:	3708      	adds	r7, #8
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	40021000 	.word	0x40021000

08000278 <pin_output_mode>:

void pin_output_mode(GPIO_TypeDef *GPIO, int n){
 8000278:	b480      	push	{r7}
 800027a:	b085      	sub	sp, #20
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
 8000280:	6039      	str	r1, [r7, #0]
	int mask = ~((0b11)<<n*2);
 8000282:	683b      	ldr	r3, [r7, #0]
 8000284:	005b      	lsls	r3, r3, #1
 8000286:	2203      	movs	r2, #3
 8000288:	fa02 f303 	lsl.w	r3, r2, r3
 800028c:	43db      	mvns	r3, r3
 800028e:	60fb      	str	r3, [r7, #12]
	GPIO->MODER &= mask;
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	681a      	ldr	r2, [r3, #0]
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	401a      	ands	r2, r3
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	601a      	str	r2, [r3, #0]
	GPIO->MODER |= (1<<n*2);
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	683a      	ldr	r2, [r7, #0]
 80002a2:	0052      	lsls	r2, r2, #1
 80002a4:	2101      	movs	r1, #1
 80002a6:	fa01 f202 	lsl.w	r2, r1, r2
 80002aa:	431a      	orrs	r2, r3
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	601a      	str	r2, [r3, #0]
}
 80002b0:	bf00      	nop
 80002b2:	3714      	adds	r7, #20
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr

080002bc <pin_input_mode>:

void pin_input_mode(GPIO_TypeDef *GPIO, int n){
 80002bc:	b480      	push	{r7}
 80002be:	b085      	sub	sp, #20
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
 80002c4:	6039      	str	r1, [r7, #0]
	int mask = ~((0b11)<<n*2);
 80002c6:	683b      	ldr	r3, [r7, #0]
 80002c8:	005b      	lsls	r3, r3, #1
 80002ca:	2203      	movs	r2, #3
 80002cc:	fa02 f303 	lsl.w	r3, r2, r3
 80002d0:	43db      	mvns	r3, r3
 80002d2:	60fb      	str	r3, [r7, #12]
	GPIO->MODER &= mask;
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	681a      	ldr	r2, [r3, #0]
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	401a      	ands	r2, r3
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	601a      	str	r2, [r3, #0]
}
 80002e0:	bf00      	nop
 80002e2:	3714      	adds	r7, #20
 80002e4:	46bd      	mov	sp, r7
 80002e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ea:	4770      	bx	lr

080002ec <turn_on_off>:

void  turn_on_off(GPIO_TypeDef *GPIO, int n, int state){
 80002ec:	b480      	push	{r7}
 80002ee:	b085      	sub	sp, #20
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	60f8      	str	r0, [r7, #12]
 80002f4:	60b9      	str	r1, [r7, #8]
 80002f6:	607a      	str	r2, [r7, #4]
	if (state == 1){
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	2b01      	cmp	r3, #1
 80002fc:	d109      	bne.n	8000312 <turn_on_off+0x26>
		GPIO->ODR|= (1<<n);
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	695b      	ldr	r3, [r3, #20]
 8000302:	2101      	movs	r1, #1
 8000304:	68ba      	ldr	r2, [r7, #8]
 8000306:	fa01 f202 	lsl.w	r2, r1, r2
 800030a:	431a      	orrs	r2, r3
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	615a      	str	r2, [r3, #20]
	} else if (state == 0){
		GPIO->ODR&=~(1<<n);
	}
	return;
 8000310:	e00d      	b.n	800032e <turn_on_off+0x42>
	} else if (state == 0){
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d10a      	bne.n	800032e <turn_on_off+0x42>
		GPIO->ODR&=~(1<<n);
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	2101      	movs	r1, #1
 800031e:	68ba      	ldr	r2, [r7, #8]
 8000320:	fa01 f202 	lsl.w	r2, r1, r2
 8000324:	43d2      	mvns	r2, r2
 8000326:	401a      	ands	r2, r3
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	615a      	str	r2, [r3, #20]
	return;
 800032c:	bf00      	nop
 800032e:	bf00      	nop
}
 8000330:	3714      	adds	r7, #20
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr

0800033a <get_input>:

int get_input(GPIO_TypeDef *gpio,int n){
 800033a:	b480      	push	{r7}
 800033c:	b083      	sub	sp, #12
 800033e:	af00      	add	r7, sp, #0
 8000340:	6078      	str	r0, [r7, #4]
 8000342:	6039      	str	r1, [r7, #0]
	return (gpio -> IDR & (1<<n))>>n;
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	691b      	ldr	r3, [r3, #16]
 8000348:	2101      	movs	r1, #1
 800034a:	683a      	ldr	r2, [r7, #0]
 800034c:	fa01 f202 	lsl.w	r2, r1, r2
 8000350:	401a      	ands	r2, r3
 8000352:	683b      	ldr	r3, [r7, #0]
 8000354:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000358:	4618      	mov	r0, r3
 800035a:	370c      	adds	r7, #12
 800035c:	46bd      	mov	sp, r7
 800035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000362:	4770      	bx	lr

08000364 <TIM2_IRQHandler>:

int i = 0;
void TIM2_IRQHandler(void){
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
	TIM2->SR &= ~(TIM_SR_UIF_Msk);
 8000368:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800036c:	691b      	ldr	r3, [r3, #16]
 800036e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000372:	f023 0301 	bic.w	r3, r3, #1
 8000376:	6113      	str	r3, [r2, #16]
	//if (get_input(GPIOA, 0)){
		if (i%2==0){
 8000378:	4b11      	ldr	r3, [pc, #68]	; (80003c0 <TIM2_IRQHandler+0x5c>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	f003 0301 	and.w	r3, r3, #1
 8000380:	2b00      	cmp	r3, #0
 8000382:	d10b      	bne.n	800039c <TIM2_IRQHandler+0x38>
			turn_on_off(GPIOE, 8, 1);
 8000384:	2201      	movs	r2, #1
 8000386:	2108      	movs	r1, #8
 8000388:	480e      	ldr	r0, [pc, #56]	; (80003c4 <TIM2_IRQHandler+0x60>)
 800038a:	f7ff ffaf 	bl	80002ec <turn_on_off>
			turn_on_off(GPIOA, 1, 1);
 800038e:	2201      	movs	r2, #1
 8000390:	2101      	movs	r1, #1
 8000392:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000396:	f7ff ffa9 	bl	80002ec <turn_on_off>
 800039a:	e00a      	b.n	80003b2 <TIM2_IRQHandler+0x4e>
		} else {
			turn_on_off(GPIOE, 8, 0);
 800039c:	2200      	movs	r2, #0
 800039e:	2108      	movs	r1, #8
 80003a0:	4808      	ldr	r0, [pc, #32]	; (80003c4 <TIM2_IRQHandler+0x60>)
 80003a2:	f7ff ffa3 	bl	80002ec <turn_on_off>
			turn_on_off(GPIOA, 1, 0);
 80003a6:	2200      	movs	r2, #0
 80003a8:	2101      	movs	r1, #1
 80003aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ae:	f7ff ff9d 	bl	80002ec <turn_on_off>
		}
	//}
	i+=1;
 80003b2:	4b03      	ldr	r3, [pc, #12]	; (80003c0 <TIM2_IRQHandler+0x5c>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	3301      	adds	r3, #1
 80003b8:	4a01      	ldr	r2, [pc, #4]	; (80003c0 <TIM2_IRQHandler+0x5c>)
 80003ba:	6013      	str	r3, [r2, #0]
}
 80003bc:	bf00      	nop
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	20000020 	.word	0x20000020
 80003c4:	48001000 	.word	0x48001000

080003c8 <main>:


uint8_t button_state = 0;
uint32_t prev_button = 0;
int main(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0

	RCC->AHBENR|=RCC_AHBENR_GPIOAEN;
 80003cc:	4b26      	ldr	r3, [pc, #152]	; (8000468 <main+0xa0>)
 80003ce:	695b      	ldr	r3, [r3, #20]
 80003d0:	4a25      	ldr	r2, [pc, #148]	; (8000468 <main+0xa0>)
 80003d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003d6:	6153      	str	r3, [r2, #20]
	RCC->AHBENR|=RCC_AHBENR_GPIOEEN;
 80003d8:	4b23      	ldr	r3, [pc, #140]	; (8000468 <main+0xa0>)
 80003da:	695b      	ldr	r3, [r3, #20]
 80003dc:	4a22      	ldr	r2, [pc, #136]	; (8000468 <main+0xa0>)
 80003de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003e2:	6153      	str	r3, [r2, #20]
	pin_input_mode(GPIOA, 0);
 80003e4:	2100      	movs	r1, #0
 80003e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ea:	f7ff ff67 	bl	80002bc <pin_input_mode>
	// кнопка
	pin_input_mode(GPIOA, 0);
 80003ee:	2100      	movs	r1, #0
 80003f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003f4:	f7ff ff62 	bl	80002bc <pin_input_mode>
	// другое
	pin_output_mode(GPIOE, 8);
 80003f8:	2108      	movs	r1, #8
 80003fa:	481c      	ldr	r0, [pc, #112]	; (800046c <main+0xa4>)
 80003fc:	f7ff ff3c 	bl	8000278 <pin_output_mode>
	pin_output_mode(GPIOA, 1);
 8000400:	2101      	movs	r1, #1
 8000402:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000406:	f7ff ff37 	bl	8000278 <pin_output_mode>

	turn_on_off(GPIOE, 8, 1);
 800040a:	2201      	movs	r2, #1
 800040c:	2108      	movs	r1, #8
 800040e:	4817      	ldr	r0, [pc, #92]	; (800046c <main+0xa4>)
 8000410:	f7ff ff6c 	bl	80002ec <turn_on_off>
	turn_on_off(GPIOA, 1, 1);
 8000414:	2201      	movs	r2, #1
 8000416:	2101      	movs	r1, #1
 8000418:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800041c:	f7ff ff66 	bl	80002ec <turn_on_off>

	TIMER2_setup();
 8000420:	f7ff fef0 	bl	8000204 <TIMER2_setup>
	//turn_on_off(GPIOA, 2, 1);

	// отключили прерывания
	TIM2->DIER &= ~TIM_DIER_UIE;
 8000424:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000428:	68db      	ldr	r3, [r3, #12]
 800042a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800042e:	f023 0301 	bic.w	r3, r3, #1
 8000432:	60d3      	str	r3, [r2, #12]
  while (1)
  {
	  if (get_input(GPIOA, 0) == 1) {
 8000434:	2100      	movs	r1, #0
 8000436:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800043a:	f7ff ff7e 	bl	800033a <get_input>
 800043e:	4603      	mov	r3, r0
 8000440:	2b01      	cmp	r3, #1
 8000442:	d108      	bne.n	8000456 <main+0x8e>
		  TIM2->DIER |= TIM_DIER_UIE;
 8000444:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000448:	68db      	ldr	r3, [r3, #12]
 800044a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800044e:	f043 0301 	orr.w	r3, r3, #1
 8000452:	60d3      	str	r3, [r2, #12]
 8000454:	e7ee      	b.n	8000434 <main+0x6c>
	  } else {
		  TIM2->DIER &= ~TIM_DIER_UIE;
 8000456:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800045a:	68db      	ldr	r3, [r3, #12]
 800045c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000460:	f023 0301 	bic.w	r3, r3, #1
 8000464:	60d3      	str	r3, [r2, #12]
	  if (get_input(GPIOA, 0) == 1) {
 8000466:	e7e5      	b.n	8000434 <main+0x6c>
 8000468:	40021000 	.word	0x40021000
 800046c:	48001000 	.word	0x48001000

08000470 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000474:	e7fe      	b.n	8000474 <NMI_Handler+0x4>

08000476 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000476:	b480      	push	{r7}
 8000478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800047a:	e7fe      	b.n	800047a <HardFault_Handler+0x4>

0800047c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000480:	e7fe      	b.n	8000480 <MemManage_Handler+0x4>

08000482 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000482:	b480      	push	{r7}
 8000484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000486:	e7fe      	b.n	8000486 <BusFault_Handler+0x4>

08000488 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800048c:	e7fe      	b.n	800048c <UsageFault_Handler+0x4>

0800048e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800048e:	b480      	push	{r7}
 8000490:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000492:	bf00      	nop
 8000494:	46bd      	mov	sp, r7
 8000496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049a:	4770      	bx	lr

0800049c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004a0:	bf00      	nop
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr

080004aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004aa:	b480      	push	{r7}
 80004ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004ae:	bf00      	nop
 80004b0:	46bd      	mov	sp, r7
 80004b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b6:	4770      	bx	lr

080004b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004bc:	f000 f83e 	bl	800053c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004c0:	bf00      	nop
 80004c2:	bd80      	pop	{r7, pc}

080004c4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004c8:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <SystemInit+0x20>)
 80004ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004ce:	4a05      	ldr	r2, [pc, #20]	; (80004e4 <SystemInit+0x20>)
 80004d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004d8:	bf00      	nop
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	e000ed00 	.word	0xe000ed00

080004e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80004e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000520 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004ec:	480d      	ldr	r0, [pc, #52]	; (8000524 <LoopForever+0x6>)
  ldr r1, =_edata
 80004ee:	490e      	ldr	r1, [pc, #56]	; (8000528 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004f0:	4a0e      	ldr	r2, [pc, #56]	; (800052c <LoopForever+0xe>)
  movs r3, #0
 80004f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004f4:	e002      	b.n	80004fc <LoopCopyDataInit>

080004f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004fa:	3304      	adds	r3, #4

080004fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000500:	d3f9      	bcc.n	80004f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000502:	4a0b      	ldr	r2, [pc, #44]	; (8000530 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000504:	4c0b      	ldr	r4, [pc, #44]	; (8000534 <LoopForever+0x16>)
  movs r3, #0
 8000506:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000508:	e001      	b.n	800050e <LoopFillZerobss>

0800050a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800050a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800050c:	3204      	adds	r2, #4

0800050e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800050e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000510:	d3fb      	bcc.n	800050a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000512:	f7ff ffd7 	bl	80004c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000516:	f000 f825 	bl	8000564 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800051a:	f7ff ff55 	bl	80003c8 <main>

0800051e <LoopForever>:

LoopForever:
    b LoopForever
 800051e:	e7fe      	b.n	800051e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000520:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000524:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000528:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800052c:	080005cc 	.word	0x080005cc
  ldr r2, =_sbss
 8000530:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000534:	20000028 	.word	0x20000028

08000538 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000538:	e7fe      	b.n	8000538 <ADC1_2_IRQHandler>
	...

0800053c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000540:	4b06      	ldr	r3, [pc, #24]	; (800055c <HAL_IncTick+0x20>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	461a      	mov	r2, r3
 8000546:	4b06      	ldr	r3, [pc, #24]	; (8000560 <HAL_IncTick+0x24>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4413      	add	r3, r2
 800054c:	4a04      	ldr	r2, [pc, #16]	; (8000560 <HAL_IncTick+0x24>)
 800054e:	6013      	str	r3, [r2, #0]
}
 8000550:	bf00      	nop
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	20000000 	.word	0x20000000
 8000560:	20000024 	.word	0x20000024

08000564 <__libc_init_array>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	4d0d      	ldr	r5, [pc, #52]	; (800059c <__libc_init_array+0x38>)
 8000568:	4c0d      	ldr	r4, [pc, #52]	; (80005a0 <__libc_init_array+0x3c>)
 800056a:	1b64      	subs	r4, r4, r5
 800056c:	10a4      	asrs	r4, r4, #2
 800056e:	2600      	movs	r6, #0
 8000570:	42a6      	cmp	r6, r4
 8000572:	d109      	bne.n	8000588 <__libc_init_array+0x24>
 8000574:	4d0b      	ldr	r5, [pc, #44]	; (80005a4 <__libc_init_array+0x40>)
 8000576:	4c0c      	ldr	r4, [pc, #48]	; (80005a8 <__libc_init_array+0x44>)
 8000578:	f000 f818 	bl	80005ac <_init>
 800057c:	1b64      	subs	r4, r4, r5
 800057e:	10a4      	asrs	r4, r4, #2
 8000580:	2600      	movs	r6, #0
 8000582:	42a6      	cmp	r6, r4
 8000584:	d105      	bne.n	8000592 <__libc_init_array+0x2e>
 8000586:	bd70      	pop	{r4, r5, r6, pc}
 8000588:	f855 3b04 	ldr.w	r3, [r5], #4
 800058c:	4798      	blx	r3
 800058e:	3601      	adds	r6, #1
 8000590:	e7ee      	b.n	8000570 <__libc_init_array+0xc>
 8000592:	f855 3b04 	ldr.w	r3, [r5], #4
 8000596:	4798      	blx	r3
 8000598:	3601      	adds	r6, #1
 800059a:	e7f2      	b.n	8000582 <__libc_init_array+0x1e>
 800059c:	080005c4 	.word	0x080005c4
 80005a0:	080005c4 	.word	0x080005c4
 80005a4:	080005c4 	.word	0x080005c4
 80005a8:	080005c8 	.word	0x080005c8

080005ac <_init>:
 80005ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ae:	bf00      	nop
 80005b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005b2:	bc08      	pop	{r3}
 80005b4:	469e      	mov	lr, r3
 80005b6:	4770      	bx	lr

080005b8 <_fini>:
 80005b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ba:	bf00      	nop
 80005bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005be:	bc08      	pop	{r3}
 80005c0:	469e      	mov	lr, r3
 80005c2:	4770      	bx	lr
